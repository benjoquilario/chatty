// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String? @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]
  conversationIds String[] @db.ObjectId
  conversation    Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds  String[] @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts        Account[]
  messages        Message[]
  reactions       Reaction[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
    id              String @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken    String
    userId          String @db.ObjectId
    expires         DateTime
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  lastMessageAt     DateTime @default(now())
  name              String?
  isGroup           Boolean?
  
  messagesIds       String[] @db.ObjectId
  messages          Message[]

  userIds           String[] @db.ObjectId
  users             User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  body              String?
  image             String?
  isDeleted         Boolean? @default(false)
  deletedAt         DateTime? @default(now())
  createdAt         DateTime @default(now())
  isEdited          Boolean?

  seenIds           String[] @db.ObjectId
  seen              User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId    String @db.ObjectId
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  reactions         Reaction[]
  senderId          String @db.ObjectId
  sender            User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Reaction {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId         String @db.ObjectId
  message          Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}